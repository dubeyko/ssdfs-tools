/*
 * SPDX-License-Identifier: BSD-3-Clause-Clear
 *
 * ssdfs-utils -- SSDFS file system utilities.
 *
 * include/ssdfs_constants.h - SSDFS constant values.
 *
 * Copyright (c) 2020-2025 Viacheslav Dubeyko <slava@dubeyko.com>
 * All rights reserved.
 *              http://www.ssdfs.org/
 *
 * Authors: Viacheslav Dubeyko <slava@dubeyko.com>
 */

#ifndef _SSDFS_CONSTANTS_H
#define _SSDFS_CONSTANTS_H

#define SSDFS_TRUE (1)
#define SSDFS_FALSE (0)

#define SSDFS_NAND_DIES_DEFAULT			(1)
#define SSDFS_SEGBMAP_FRAG_PER_PEB_DEFAULT	(1)
#define SSDFS_SEGBMAP_SEGS_PER_CHAIN_DEFAULT	(1)
#define SSDFS_MAPTBL_STRIPES_PER_FRAG_DEFAULT	(1)
#define SSDFS_MAPTBL_FRAG_PER_PEB_DEFAULT	(1)
#define SSDFS_MAPTBL_RESERVED_PEBS_DEFAULT	(10)
#define SSDFS_PEB_RECOVER_MONTHS_DEFAULT	(1)
#define SSDFS_LOG_MAX_PAGES			(256)
#define SSDFS_LOGS_PER_PEB_DEFAULT		(8)
#define SSDFS_DATA_LOGS_PER_PEB_DEFAULT		SSDFS_LOGS_PER_PEB_DEFAULT
#define SSDFS_MIN_SIZE_COMPRESSION_THRESHOLD	(64)

#define SSDFS_MTD_MAJOR_DEV			(90)

enum {
	SSDFS_MTD_DEVICE,
	SSDFS_BLK_DEVICE,
	SSDFS_ZNS_DEVICE,
	SSDFS_DEVICE_TYPE_MAX
};

enum {
	SSDFS_PEB_ERASURE_OK = 0,
	SSDFS_PEB_IS_BAD,
	SSDFS_RECOVERING_PEB,
	SSDFS_CHECK_PEB_CODE_MAX
};

#define SSDFS_256B_STRING	"265B"
#define SSDFS_512B_STRING	"512B"
#define SSDFS_1KB_STRING	"1KB"
#define SSDFS_2KB_STRING	"2KB"
#define SSDFS_4KB_STRING	"4KB"
#define SSDFS_8KB_STRING	"8KB"
#define SSDFS_16KB_STRING	"16KB"
#define SSDFS_32KB_STRING	"32KB"
#define SSDFS_64KB_STRING	"64KB"
#define SSDFS_128KB_STRING	"128KB"
#define SSDFS_256KB_STRING	"256KB"
#define SSDFS_512KB_STRING	"512KB"
#define SSDFS_1MB_STRING	"1MB"
#define SSDFS_2MB_STRING	"2MB"
#define SSDFS_4MB_STRING	"4MB"
#define SSDFS_8MB_STRING	"8MB"
#define SSDFS_16MB_STRING	"16MB"
#define SSDFS_32MB_STRING	"32MB"
#define SSDFS_64MB_STRING	"64MB"
#define SSDFS_128MB_STRING	"128MB"
#define SSDFS_256MB_STRING	"256MB"
#define SSDFS_512MB_STRING	"512MB"
#define SSDFS_1GB_STRING	"1GB"
#define SSDFS_2GB_STRING	"2GB"
#define SSDFS_4GB_STRING	"4GB"
#define SSDFS_8GB_STRING	"8GB"
#define SSDFS_16GB_STRING	"16GB"
#define SSDFS_32GB_STRING	"32GB"
#define SSDFS_64GB_STRING	"64GB"

enum {
	SSDFS_256B	= 256,
	SSDFS_512B	= 512,
	SSDFS_1KB	= 1024,
	SSDFS_2KB	= 2048,
	SSDFS_4KB	= 4096,
	SSDFS_8KB	= 8192,
	SSDFS_16KB	= 16384,
	SSDFS_32KB	= 32768,
	SSDFS_64KB	= 65536,
	SSDFS_128KB	= 131072,
	SSDFS_256KB	= 262144,
	SSDFS_512KB	= 524288,
	SSDFS_1MB	= 1048576,
	SSDFS_2MB	= 2097152,
	SSDFS_4MB	= 4194304,
	SSDFS_8MB	= 8388608,
	SSDFS_16MB	= 16777216,
	SSDFS_32MB	= 33554432,
	SSDFS_64MB	= 67108864,
	SSDFS_128MB	= 134217728,
	SSDFS_256MB	= 268435456,
	SSDFS_512MB	= 536870912,
	SSDFS_1GB	= 1073741824,
	SSDFS_2GB	= 2147483648,
	SSDFS_4GB	= 4294967296,
	SSDFS_8GB	= 8589934592,
	SSDFS_16GB	= 17179869184,
	SSDFS_32GB	= 34359738368,
	SSDFS_64GB	= 68719476736,
};

enum {
	SSDFS_UNCOMPRESSED_BLOB,
	SSDFS_ZLIB_BLOB,
	SSDFS_LZO_BLOB,
	SSDFS_UNKNOWN_COMPRESSION
};

/*
 * SEG2PEB_TYPE() - segment to PEB type
 */
static inline
int SEG2PEB_TYPE(int seg_type)
{
	switch (seg_type) {
	case SSDFS_USER_DATA_SEG_TYPE:
		return SSDFS_MAPTBL_DATA_PEB_TYPE;

	case SSDFS_LEAF_NODE_SEG_TYPE:
		return SSDFS_MAPTBL_LNODE_PEB_TYPE;

	case SSDFS_HYBRID_NODE_SEG_TYPE:
		return SSDFS_MAPTBL_HNODE_PEB_TYPE;

	case SSDFS_INDEX_NODE_SEG_TYPE:
		return SSDFS_MAPTBL_IDXNODE_PEB_TYPE;

	case SSDFS_INITIAL_SNAPSHOT_SEG_TYPE:
		return SSDFS_MAPTBL_INIT_SNAP_PEB_TYPE;

	case SSDFS_SB_SEG_TYPE:
		return SSDFS_MAPTBL_SBSEG_PEB_TYPE;

	case SSDFS_SEGBMAP_SEG_TYPE:
		return SSDFS_MAPTBL_SEGBMAP_PEB_TYPE;

	case SSDFS_MAPTBL_SEG_TYPE:
		return SSDFS_MAPTBL_MAPTBL_PEB_TYPE;
	}

	return SSDFS_MAPTBL_PEB_TYPE_MAX;
}

#endif /* _SSDFS_CONSTANTS_H */
